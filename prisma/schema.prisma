generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DiscordLinkedRole {
  id   String @id @default(cuid())
  User User[]

  discordId    String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // profile
  preferredName String?
  pronouns      String?

  // contact
  phone String?

  // external
  pyrodactylUserId Int?
  stripeCustomerId String?

  // connections
  discordLinkedRoleId String?
  discordLinkedRole   DiscordLinkedRole? @relation(fields: [discordLinkedRoleId], references: [id])

  // system
  role   String?
  locale String?
  tz     String?

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
