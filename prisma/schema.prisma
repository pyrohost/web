generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id               String  @id @default(cuid())
  stripeCustomerId String?
  pyrodactylUserId Int?

  // profile
  preferredName String?
  pronouns      String?

  // legal
  firstName String?
  lastName  String?
  phone     String?
  address   Address?

  // auth
  email        String            @unique
  passwordHash String?
  connections  OAuthConnection[]

  // system
  servers Server[]

  // permissions
  admin Boolean? @default(false)

  // email verification
  emailVerified          Boolean                 @default(false)
  emailVerificationToken EmailVerificationToken?
  passwordResetToken     PasswordResetToken?

  // sessions
  sessions Session[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OAuthConnection {
  id             String @id @default(cuid())
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Price {
  id        String  @id @default(cuid())
  stripeId  String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  amount   Int
  currency String

  recurring    Boolean
  every_months Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id          String @id @default(cuid())
  stripeId    String
  name        String
  description String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  prices     Price[]
  metadata   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ServerType {
  MANAGED
  UNMANAGED
}

model Server {
  id             String     @id @default(cuid())
  userId         String
  serverId       String
  type           ServerType

  stripeSubscriptionId String?
  stripePriceId        String?

  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Address {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  street1 String
  street2 String?
  city    String
  state   String
  postal  String
  country String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  code      String
  email     String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  code      String
  email     String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
